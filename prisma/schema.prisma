// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Users {
  id                     Int              @id @default(autoincrement())
  username               String
  firstName              String           @default("")
  lastName               String           @default("")
  email                  String           @unique
  password               String
  roleId                 Int              @default(2)
  role                   Roles            @relation(fields: [roleId], references: [id], onDelete: Cascade)
  profile_picture        String
  is_private             Boolean          @default(false)
  is_active              Boolean          @default(true)
  is_2fa                 Boolean          @default(false)
  secret_2fa             String           @default("")
  createdAt              DateTime         @default(now())
  updatedAt              DateTime         @updatedAt
  refreshToken           RefreshToken[]
  resetToken             ResetToken?
  posts                  Posts[]
  followers              Followers[]      @relation("FollowersRelation")
  following              Followers[]      @relation("FollowingRelation")
  followRequestsSent     FollowRequests[] @relation("FollowRequestsSent")
  followRequestsReceived FollowRequests[] @relation("FollowRequestsReceived")
  PostLikes              PostLikes[]
  blockedBy              BlockList[]      @relation("BlockedRelation")
  blocking               BlockList[]      @relation("BlockerRelation")
  comments               Comments[]
  bookmarks              Bookmarks[]
  notifications          Notifications[]  @relation("UserNotifications")
  notificationsTriggered Notifications[]  @relation("ActorNotifications")
  CommentLikes           CommentLikes[]
}

model RefreshToken {
  id         Int      @id @default(autoincrement())
  token      String   @unique
  userId     Int      @unique
  user       Users    @relation(fields: [userId], references: [id], onDelete: Cascade)
  expiryDate DateTime
}

model ResetToken {
  id         Int      @id @default(autoincrement())
  token      String   @unique
  userId     Int      @unique
  user       Users    @relation(fields: [userId], references: [id], onDelete: Cascade)
  expiryDate DateTime
}

model Roles {
  id    Int     @id @default(autoincrement())
  name  String  @unique
  Users Users[]
}

model Posts {
  id          Int         @id @default(autoincrement())
  userId      Int
  user        Users       @relation(fields: [userId], references: [id], onDelete: Cascade)
  title       String
  content     String
  media_url   String[]    @default([])
  status      PostStatus  @default(PUBLISHED)
  likes_count Int         @default(0)
  views_count Int         @default(0)
  pinned      Boolean     @default(false)
  created_at  DateTime    @default(now())
  updated_at  DateTime    @updatedAt
  PostLikes   PostLikes[]
  Comments    Comments[]
  Bookmarks   Bookmarks[]
}

model PostLikes {
  postId Int
  userId Int
  post   Posts @relation(fields: [postId], references: [id], onDelete: Cascade)
  user   Users @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([postId, userId]) // Composite primary key
}

model Followers {
  id          Int   @id @default(autoincrement())
  followerId  Int
  followingId Int
  follower    Users @relation("FollowersRelation", fields: [followerId], references: [id])
  following   Users @relation("FollowingRelation", fields: [followingId], references: [id])

  @@unique([followerId, followingId]) // Ensure a user can't follow twice
}

model FollowRequests {
  id          Int   @id @default(autoincrement())
  requesterId Int
  targetId    Int
  requester   Users @relation("FollowRequestsSent", fields: [requesterId], references: [id])
  target      Users @relation("FollowRequestsReceived", fields: [targetId], references: [id])

  @@unique([requesterId, targetId]) // Ensure a user can't request twice
}

model BlockList {
  id        Int @id @default(autoincrement())
  blockerId Int
  blockedId Int

  blocker Users @relation(fields: [blockerId], references: [id], name: "BlockerRelation")
  blocked Users @relation(fields: [blockedId], references: [id], name: "BlockedRelation")

  @@unique([blockerId, blockedId])
}

model Comments {
  id          Int      @id @default(autoincrement())
  postId      Int
  userId      Int
  content     String
  likes_count Int      @default(0)
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt

  post         Posts          @relation(fields: [postId], references: [id], onDelete: Cascade)
  user         Users          @relation(fields: [userId], references: [id], onDelete: Cascade)
  CommentLikes CommentLikes[]
}

model CommentLikes {
  commentId Int
  userId    Int

  comment Comments @relation(fields: [commentId], references: [id], onDelete: Cascade)
  user    Users    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([commentId, userId])
}

model Bookmarks {
  id         Int      @id @default(autoincrement())
  userId     Int
  postId     Int
  created_at DateTime @default(now())

  user Users @relation(fields: [userId], references: [id], onDelete: Cascade)
  post Posts @relation(fields: [postId], references: [id], onDelete: Cascade)
}

enum NotificationType {
  LIKE
  COMMENT
  FOLLOW
  FOLLOW_REQUEST
}

model Notifications {
  id         Int              @id @default(autoincrement())
  userId     Int // User who will receive the notification
  actorId    Int // User who performed the action
  type       NotificationType @default(FOLLOW_REQUEST)
  entityId   Int // ID of the related entity (post, comment, etc.)
  isRead     Boolean          @default(false)
  created_at DateTime         @default(now())

  user  Users @relation("UserNotifications", fields: [userId], references: [id], onDelete: Cascade)
  actor Users @relation("ActorNotifications", fields: [actorId], references: [id], onDelete: Cascade)
}

model ScheduledPost {
  id            Int        @id @default(autoincrement())
  title         String
  content       String
  media_url     String[]
  userId        Int
  status        PostStatus
  schedule_time DateTime
  createdAt     DateTime   @default(now())
}

enum PostStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
  SCHEDULE
}
